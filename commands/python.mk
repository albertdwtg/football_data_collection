SHELL := /bin/bash
GCF_TESTS_FOLDER ?= tests_py
REQUIREMENTS_FILE = requirements.txt
TEST_REQUIREMENTS_FILE = test_requirements.txt
VENV_TEST_DIR = .venv_test
VENV_DIR = .venv
RUFF_CONFIG_FILE = .ruff.toml

# .env file content for python project
define ENV_VARIABLES
PROJECT_ID = $(GCP_PROJECT_ID)
PROJECT_ENV = $(ENV)
endef
export ENV_VARIABLES

# test requirements file content
define TEST_REQUIREMENTS
pytest
ruff==0.7.1
endef
export TEST_REQUIREMENTS

# config file for ruff python linter
define RUFF_CONFIG
[lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # isort
    "I",
	#pylint
	"PL",
	#flake8-bandit
	"S",
]
endef
export RUFF_CONFIG

# Check if all dependencies have a fixed version
check-requirements:
	echo "[$@] --> Check versions in requirements file"
	@if grep -q -v "==" $(GCF_CODE_FOLDER)/$(GCF_SOURCE_CODE)/$(REQUIREMENTS_FILE); then \
		echo "ERROR : Some requirements doesn't have a specified version"; \
		exit 1; \
	fi

# Run test and linter
py-checks:
	echo '[$@] --> Start to test python code'
	set -eo pipefail; \
	cd $(GCF_CODE_FOLDER)/$(GCF_SOURCE_CODE); \
		echo "$$ENV_VARIABLES" > .env; \
		echo "[$@] --> Create test requirements"; \
		echo "$$TEST_REQUIREMENTS" > $(TEST_REQUIREMENTS_FILE); \
		cat $(REQUIREMENTS_FILE) >> $(TEST_REQUIREMENTS_FILE); \
		python3 -m venv $(VENV_TEST_DIR); \
		source $(VENV_TEST_DIR)/bin/activate; \
		echo "[$@] --> Install test requirements"; \
		pip install -r $(TEST_REQUIREMENTS_FILE); \
		echo "$$RUFF_CONFIG" > $(RUFF_CONFIG_FILE); \
		$(VENV_TEST_DIR)/bin/ruff check --config=$(RUFF_CONFIG_FILE);\
		if [ -d "../$(GCF_TESTS_FOLDER)" ]; then \
			echo "[$@] --> Run unit tests"; \
			python3 -m pytest -q ../$(GCF_TESTS_FOLDER)/*;\
		else \
			echo "[$@] --> No unit tests to run"; \
		fi

# Remove files created during py-checks
clean-py-files:
	echo '[$@] --> Remove files generated by python code testing'
	cd $(GCF_CODE_FOLDER)/$(GCF_SOURCE_CODE); \
		rm -f .env;\
		rm -f $(RUFF_CONFIG_FILE);\
		rm -f $(TEST_REQUIREMENTS_FILE);

# All operations in order
py-testing: check-requirements py-checks clean-py-files

py-cicd:
	if [ -d $(GCF_CODE_FOLDER) ]; then \
		if [ -d $(GCF_CODE_FOLDER)/$(GCF_SOURCE_CODE) ]; then \
			$(MAKE) py-testing ENV=$(ENV) MODULE=$(MODULE); \
		else \
			echo "[$@] --> No python folder found, $(GCF_SOURCE_CODE) was not found inside $(GCF_CODE_FOLDER)"; \
			exit 1; \
		fi; \
	else \
		echo "[$@] --> No GCF code folder found, $(GCF_CODE_FOLDER) was not found"; \
	fi

# Execute cloud functions locally
local-cf:
	echo '[$@] --> Start to build python local cloud function'
	set -eo pipefail; \
	cd $(GCF_CODE_FOLDER)/$(GCF_SOURCE_CODE); \
		echo 'Create venv'; \
		python3 -m venv $(VENV_DIR); \
		source $(VENV_DIR)/bin/activate; \
		echo 'Install requirements'; \
		pip install -r $(REQUIREMENTS_FILE); \
		echo "$$ENV_VARIABLES" > .env; \
		functions-framework --target=run --debug;


