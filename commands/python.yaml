version: '3'

tasks:
  create-checksum:
    desc: Create checksum of the source code
    internal: true
    cmds:
      - echo '[{{.TASK}}] --> Create checksum of the source code'
      - find {{.GCF_CODE_FOLDER}}/{{.GCF_SOURCE_CODE}} -type f \( -name "*.py" -o -name "*.txt" \) -print0 | sort -z | xargs -0 sha1sum | sha1sum | head -c 40 > {{.GCF_CODE_FOLDER}}/{{.GCF_CHECKSUM}}

  check-requirements:
    desc: Check versions in requirements file
    internal: true
    cmds:
      - echo "[{{.TASK}}] --> Check versions in requirements file"
      - |
        if grep -q -v "==" {{.GCF_CODE_FOLDER}}/{{.GCF_SOURCE_CODE}}/{{.REQUIREMENTS_FILE}}; then
          echo "ERROR : Some requirements don't have a specified version"
          exit 1
        fi

  py-checks:
    desc: Run test and linter of python code
    internal: true
    cmds:
      - echo '[{{.TASK}}] --> Start to test python code'
      - |
        set -eo pipefail
        cd {{.GCF_CODE_FOLDER}}/{{.GCF_SOURCE_CODE}}
        echo "{{.ENV_VARIABLES}}" > .env
        echo "[{{.TASK}}] --> Create test requirements {{.TEST_REQUIREMENTS_FILE}}"
        cat {{.BASE_REQUIREMENTS_FILE}} > {{.TEST_REQUIREMENTS_FILE}}
        cat {{.REQUIREMENTS_FILE}} >> {{.TEST_REQUIREMENTS_FILE}}
        echo "[{{.TASK}}] --> Create venv"
        python3 -m venv {{.ROOT}}/{{.GCF_CODE_FOLDER}}/{{.VENV_TEST_DIR}}
        echo "[{{.TASK}}] --> Install test requirements"
        uv pip install -r {{.TEST_REQUIREMENTS_FILE}} -p {{.ROOT}}/{{.GCF_CODE_FOLDER}}/{{.VENV_TEST_DIR}} --quiet
        echo "[{{.TASK}}] --> Run ruff linter"
        {{.ROOT}}/{{.GCF_CODE_FOLDER}}/{{.VENV_TEST_DIR}}/bin/ruff check --config={{.RUFF_CONFIG_FILE}}
        if [ -d "../{{.GCF_TESTS_FOLDER}}" ]; then
          echo "[{{.TASK}}] --> Run unit tests"
          {{.ROOT}}/{{.GCF_CODE_FOLDER}}/{{.VENV_TEST_DIR}}/bin/pytest -q ../{{.GCF_TESTS_FOLDER}}/*
        else
          echo "[{{.TASK}}] --> No unit tests to run"
        fi

  zip-source:
    desc: Create zip of the source code
    internal: true
    cmds:
      - echo '[{{.TASK}}] --> Create zip of the source code'
      - |
        cd {{.GCF_CODE_FOLDER}}/{{.GCF_SOURCE_CODE}}
        zip -r ../{{.GCF_SOURCE_ZIP}} . -x ./{{.VENV_TEST_DIR}}/* ./.ruff_cache/*
        CHECKSUM=$(cat {{.ROOT}}/{{.GCF_CODE_FOLDER}}/{{.GCF_CHECKSUM}})
        eval "echo '[{{.TASK}}] --> copying into gs://{{.GCS_BUCKET_SOURCE_CODE}}/{{.MODULE}}/${CHECKSUM}.zip'"
        gsutil cp ../{{.GCF_SOURCE_ZIP}} gs://{{.GCS_BUCKET_SOURCE_CODE}}/{{.MODULE}}/${CHECKSUM}.zip

  clean-py-files:
    desc: Remove files generated by python code testing
    internal: true
    cmds:
      - echo '[{{.TASK}}] --> Remove files generated by python code testing'
      - |
        cd {{.GCF_CODE_FOLDER}}/{{.GCF_SOURCE_CODE}}
        rm -f .env
        find . -type d -name "__pycache__" -exec rm -r {} +
        rm -f {{.TEST_REQUIREMENTS_FILE}}

  py-operations:
    desc: All operations in order
    cmds:
      - task: create-checksum
      - task: check-requirements
      - task: py-checks
      - task: clean-py-files
      - task: zip-source

  py-cicd:
    desc: Run py-operations if GCF code folder exists
    internal: true
    cmds:
      - |
        if [ -d {{.GCF_CODE_FOLDER}} ]; then
          if [ -d {{.GCF_CODE_FOLDER}}/{{.GCF_SOURCE_CODE}} ]; then
            task py-operations
          else
          echo "[{{.TASK}}] --> No python folder found, {{.GCF_SOURCE_CODE}} was not found inside {{.GCF_CODE_FOLDER}}"
            echo "[{{.TASK}}] --> No python folder found, {{.GCF_SOURCE_CODE}} was not found inside {{.GCF_CODE_FOLDER}}"
            exit 0
          fi
        else
          echo "[{{.TASK}}] --> No GCF code folder found, {{.GCF_CODE_FOLDER}} was not found"
          exit 0
        fi

  # local-cf:
  #   desc: Execute cloud functions locally
  #   cmds:
  #     - echo '[{{.TASK}}] --> Start to build python local cloud function'
  #     - |
  #       set -eo pipefail
  #       cd {{.GCF_CODE_FOLDER}}/{{.GCF_SOURCE_CODE}}
  #       echo 'Create venv'
  #       python3 -m venv {{.VENV_DIR}}
  #       source {{.VENV_DIR}}/bin/activate
  #       echo 'Install requirements'
  #       pip install -r {{.REQUIREMENTS_FILE}}
  #       echo "{{.ENV_VARIABLES}}" > .env
  #       functions-framework --target=run --debug
